FROM nvidia/cuda:12.2.2-devel-ubuntu20.04

ENV DEBIAN_FRONTEND noninteractive

##############################################################################
# Temporary Installation Directory
##############################################################################
ENV STAGE_DIR=/tmp
RUN mkdir -p ${STAGE_DIR}

##############################################################################
# Installation/Basic Utilities
##############################################################################
RUN apt-get update && \
        apt-get install -y --no-install-recommends \
        software-properties-common build-essential autotools-dev \
        nfs-common pdsh \
        cmake g++ gcc \
        curl wget vim tmux emacs less unzip \
        htop iftop iotop ca-certificates openssh-client openssh-server \
        rsync iputils-ping net-tools sudo \
        llvm-dev

##############################################################################
# Installation Latest Git
##############################################################################
RUN add-apt-repository ppa:git-core/ppa -y && \
        apt-get update && \
        apt-get install -y git && \
        git --version


##############################################################################
# Client Liveness & Uncomment Port 22 for SSH Daemon
##############################################################################
# Keep SSH client alive from server side
RUN echo "ClientAliveInterval 30" >> /etc/ssh/sshd_config
RUN cp /etc/ssh/sshd_config ${STAGE_DIR}/sshd_config && \
        sed "0,/^#Port 22/s//Port 22/" ${STAGE_DIR}/sshd_config > /etc/ssh/sshd_config

##############################################################################
# Mellanox OFED
##############################################################################
ENV MLNX_OFED_VERSION=4.9-7.1.0.0
RUN apt-get install -y libnuma-dev
RUN cd ${STAGE_DIR} && \
        wget -q -O - http://www.mellanox.com/downloads/ofed/MLNX_OFED-${MLNX_OFED_VERSION}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64.tgz | tar xzf - && \
        cd MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64 && \
        ./mlnxofedinstall --user-space-only --without-fw-update --all -q && \
        cd ${STAGE_DIR} && \
        rm -rf ${STAGE_DIR}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64*

##############################################################################
# nv_peer_mem
##############################################################################
ENV NV_PEER_MEM_VERSION=1.2
ENV NV_PEER_MEM_TAG=${NV_PEER_MEM_VERSION}-0
RUN mkdir -p ${STAGE_DIR} && \
        git clone https://github.com/Mellanox/nv_peer_memory.git --branch ${NV_PEER_MEM_TAG} ${STAGE_DIR}/nv_peer_memory && \
        cd ${STAGE_DIR}/nv_peer_memory && \
        ./build_module.sh && \
        cd ${STAGE_DIR} && \
        tar xzf ${STAGE_DIR}/nvidia-peer-memory_${NV_PEER_MEM_VERSION}.orig.tar.gz && \
        cd ${STAGE_DIR}/nvidia-peer-memory-${NV_PEER_MEM_VERSION} && \
        apt-get update && \
        apt-get install -y dkms && \
        dpkg-buildpackage -us -uc && \
        dpkg -i ${STAGE_DIR}/nvidia-peer-memory_${NV_PEER_MEM_TAG}_all.deb
        
##############################################################################
# libnl
##############################################################################
# Install libnuma-dev
RUN apt-get update && apt-get install -y libnuma-dev

# Install necessary tools and dependencies
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
    wget \
    build-essential \
    gawk \
    libnuma-dev \
    libibverbs-dev \
    librdmacm-dev \
    cmake

# Manually download and install the libnl library
RUN cd ${STAGE_DIR} && \
    wget https://www.infradead.org/~tgr/libnl/files/libnl-3.2.25.tar.gz && \
    tar -xzf libnl-3.2.25.tar.gz && \
    cd libnl-3.2.25 && \
    ./configure && \
    make && \
    make install

##############################################################################
# RDMA-core
##############################################################################
RUN cd ${STAGE_DIR} && \
    wget https://github.com/linux-rdma/rdma-core/releases/download/v36.0/rdma-core-36.0.tar.gz && \
    tar -xzf rdma-core-36.0.tar.gz && \
    cd rdma-core-36.0 && \
    mkdir build && cd build && \
    cmake .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig
# Setting environment variables
ENV STAGE_DIR=/tmp
ENV UCX_VERSION=1.11.2
ENV OPENMPI_VERSION=4.1.5
ENV UCX_HOME=/home/skku/ucx
ENV MPI_HOME=/home/skku/openmpi
ENV LIBEVENT_VERSION=2.1.12-stable
ENV PMIX_VERSION=3.2.2
ENV HWLOC_VERSION=2.4.1

# Install necessary tools and dependencies
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
    wget \
    build-essential \
    gawk \
    libnuma-dev \
    libibverbs-dev \
    librdmacm-dev \
    bison \
    flex \
    python3 \
    git \
    autoconf \
    automake \
    libtool \
    cmake \
    pandoc \
    pkg-config \
    openssl \
    libssl-dev

# Download and install libevent
RUN cd ${STAGE_DIR} && \
    wget https://github.com/libevent/libevent/releases/download/release-${LIBEVENT_VERSION}/libevent-${LIBEVENT_VERSION}.tar.gz && \
    tar -xzf libevent-${LIBEVENT_VERSION}.tar.gz && \
    cd libevent-${LIBEVENT_VERSION} && \
    ./configure --prefix=/usr/local/libevent && \
    make -j$(nproc) && \
    make install

# Download and install hwloc
RUN cd ${STAGE_DIR} && \
    wget https://download.open-mpi.org/release/hwloc/v${HWLOC_VERSION%.*}/hwloc-${HWLOC_VERSION}.tar.gz && \
    tar -xzf hwloc-${HWLOC_VERSION}.tar.gz && \
    cd hwloc-${HWLOC_VERSION} && \
    ./configure --prefix=/usr/local/hwloc && \
    make -j$(nproc) && \
    make install

# Download and install PMIx
RUN cd ${STAGE_DIR} && \
    wget https://github.com/openpmix/openpmix/releases/download/v${PMIX_VERSION}/pmix-${PMIX_VERSION}.tar.gz && \
    tar -xzf pmix-${PMIX_VERSION}.tar.gz && \
    cd pmix-${PMIX_VERSION} && \
    ./configure --prefix=/usr/local/pmix  --with-libevent=/usr/local/libevent --with-hwloc=/usr/local/hwloc && \
    make -j$(nproc) && \
    make install

##############################################################################
# UCX
##############################################################################
ENV UCX_HOME=/usr/local/ucx
RUN mkdir -p ${UCX_HOME} && \
    cd ${STAGE_DIR} && \
    wget -q -O - https://github.com/openucx/ucx/releases/download/v1.11.2/ucx-1.11.2.tar.gz | tar xzf - && \
    cd ucx-1.11.2 && \
    ./configure --prefix=/usr/local/ucx && \
    make -j"$(nproc)" install && \
    cd ${STAGE_DIR} && \
    rm -rf ${STAGE_DIR}/ucx-1.11.2

##############################################################################
# OPENMPI
##############################################################################
ENV HWLOC_VERSION=
ENV LIBEVENT_VERSION=
ENV PMIX_VERSION=
ENV OPENMPI_BASEVERSION=4.1
ENV MPI_HOME=/usr/local/mpi
ENV OPENMPI_VERSION=${OPENMPI_BASEVERSION}.5
RUN cd ${STAGE_DIR} && \
        wget -q -O - https://download.open-mpi.org/release/open-mpi/v${OPENMPI_BASEVERSION}/openmpi-${OPENMPI_VERSION}.tar.gz | tar xzf - && \
        cd openmpi-${OPENMPI_VERSION} && \
        ./configure --prefix=/usr/local/openmpi-${OPENMPI_VERSION} --with-pmix=/usr/local/pmix --with-ucx=/usr/local/ucx --with-hwloc=/usr/local/hwloc --with-libevent=/usr/local/libevent --with-cuda=/usr/local/cuda && \
        make -j"$(nproc)" install && \
        ln -s /usr/local/openmpi-${OPENMPI_VERSION} /usr/local/mpi && \
        # Sanity check:
        test -f /usr/local/mpi/bin/mpic++ && \
        cd ${STAGE_DIR} && \
        rm -r ${STAGE_DIR}/openmpi-${OPENMPI_VERSION}
ENV PATH=/usr/local/mpi/bin:${PATH} \
        LD_LIBRARY_PATH=/usr/local/lib:/usr/local/mpi/lib:/usr/local/mpi/lib64:${LD_LIBRARY_PATH}
# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/mpi/bin/mpirun /usr/local/mpi/bin/mpirun.real && \
        echo '#!/bin/bash' > /usr/local/mpi/bin/mpirun && \
        echo 'mpirun.real --allow-run-as-root --prefix /usr/local/mpi "$@"' >> /usr/local/mpi/bin/mpirun && \
        chmod a+x /usr/local/mpi/bin/mpirun

##############################################################################
# Python
##############################################################################
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHON_VERSION=3
RUN apt-get install -y python3 python3-dev && \
        rm -f /usr/bin/python && \
        ln -s /usr/bin/python3 /usr/bin/python && \
        curl -O https://bootstrap.pypa.io/pip/3.6/get-pip.py && \
        python get-pip.py && \
        rm get-pip.py && \
        pip install --upgrade pip && \
        # Print python an pip version
        python -V && pip -V
RUN pip install pyyaml
RUN pip install ipython

##############################################################################
# Some Packages
##############################################################################
RUN apt-get update && \
        apt-get install -y --no-install-recommends \
        libsndfile-dev \
        libcupti-dev \
        libjpeg-dev \
        libpng-dev \
        screen \
        libaio-dev
RUN pip install psutil \
        yappi \
        cffi \
        ipdb \
        pandas \
        matplotlib \
        py3nvml \
        pyarrow \
        graphviz \
        astor \
        boto3 \
        tqdm \
        sentencepiece \
        msgpack \
        requests \
        pandas \
        sphinx \
        sphinx_rtd_theme \
        scipy \
        numpy \
        scikit-learn \
        nvidia-ml-py3 \
        mpi4py

##############################################################################
## SSH daemon port inside container cannot conflict with host OS port
###############################################################################
ENV SSH_PORT=2222
RUN cat /etc/ssh/sshd_config > ${STAGE_DIR}/sshd_config && \
        sed "0,/^Port 22/s//Port ${SSH_PORT}/" ${STAGE_DIR}/sshd_config > /etc/ssh/sshd_config

##############################################################################
# PyTorch
##############################################################################
ENV PYTORCH_VERSION=1.13.0
RUN pip install torch==${PYTORCH_VERSION}

##############################################################################
# PyYAML build issue
# https://stackoverflow.com/a/53926898
##############################################################################
RUN rm -rf /usr/lib/python3/dist-packages/yaml && \
        rm -rf /usr/lib/python3/dist-packages/PyYAML-*

##############################################################################
# DeepSpeed
##############################################################################
RUN git clone https://github.com/microsoft/DeepSpeed.git ${STAGE_DIR}/DeepSpeed
RUN cd ${STAGE_DIR}/DeepSpeed && \
        git checkout . && \
        git checkout master && \
        pip install .
RUN rm -rf ${STAGE_DIR}/DeepSpeed
RUN python -c "import deepspeed; print(deepspeed.__version__)"

##############################################################################
# Anaconda
##############################################################################
RUN apt-get update && apt-get install -y curl bzip2 \
    && rm -rf /var/lib/apt/lists/*
RUN curl -sSL https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh -o /tmp/anaconda.sh
RUN /bin/bash /tmp/anaconda.sh -b -p /opt/conda \
    && rm /tmp/anaconda.sh
ENV PATH /opt/conda/bin:$PATH
RUN export MPICC=$(which mpicc) && \
    export CC=$(which gcc)
RUN conda create -n deepspeed_env python=3.11.5 -y && \
    conda install -n deepspeed_env gxx_linux-64 -y && \
    conda install -n deepspeed_env pytorch torchvision torchaudio pytorch-cuda=12.1 -c pytorch -c nvidia -y && \
    conda run -n deepspeed_env pip install \
    annotated-types==0.7.0 \
    certifi==2024.6.2 \
    charset-normalizer==3.3.2 \
    deepspeed==0.15.0 \
    filelock==3.13.1 \
    fsspec==2024.2.0 \
    hjson==3.1.0 \
    huggingface-hub==0.23.3 \
    idna==3.7 \
    jinja2==3.1.3 \
    markupsafe==2.1.5 \
    mpi4py==3.1.6 \
    mpmath==1.3.0 \
    networkx==3.2.1 \
    ninja==1.11.1.1 \
    numpy==1.26.3 \
    nvidia-cublas-cu12==12.1.3.1 \
    nvidia-cuda-cupti-cu12==12.1.105 \
    nvidia-cuda-nvrtc-cu12==12.1.105 \
    nvidia-cuda-runtime-cu12==12.1.105 \
    nvidia-cudnn-cu12==8.9.2.26 \
    nvidia-cufft-cu12==11.0.2.54 \
    nvidia-curand-cu12==10.3.2.106 \
    nvidia-cusolver-cu12==11.4.5.107 \
    nvidia-cusparse-cu12==12.1.0.106 \
    nvidia-nccl-cu12==2.20.5 \
    nvidia-nvjitlink-cu12==12.1.105 \
    nvidia-nvtx-cu12==12.1.105 \
    nvtx==0.2.10 \
    packaging==24.1 \
    pandas==2.2.2 \
    pillow==10.2.0 \
    protobuf==5.27.2 \
    psutil==5.9.8 \
    py-cpuinfo==9.0.0 \
    pydantic==2.7.3 \
    pydantic-core==2.18.4 \
    pynvml==11.5.0 \
    python-dateutil==2.9.0.post0 \
    pytz==2024.1 \
    pyyaml==6.0.1 \
    regex==2024.5.15 \
    requests==2.32.3 \
    safetensors==0.4.3 \
    scipy==1.14.0 \
    sentencepiece==0.2.0 \
    six==1.16.0 \
    sympy==1.12 \
    tokenizers==0.19.1 \
    torchinfo==1.8.0 \
    tqdm==4.66.4 \
    transformers==4.41.2 \
    triton==2.3.1 \
    typing-extensions==4.9.0 \
    tzdata==2024.1 \
    urllib3==2.2.1


##############################################################################
## Add deepspeed user
###############################################################################
# Install SSH packages
RUN apt-get update && apt-get install -y openssh-server sudo

# Add the skku user and set a password
RUN useradd --create-home --uid 1000 --shell /bin/bash skku
RUN usermod -aG sudo skku
RUN echo "skku ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoer
RUN echo "skku:skku" | chpasswd skku

# Add environment variables
RUN echo "export PATH=${MPI_HOME}/bin:${UCX_HOME}/bin:/usr/local/libevent/bin:/usr/local/pmix/bin:/usr/local/hwloc/bin:\$PATH" >> /etc/profile && \
    echo "export LD_LIBRARY_PATH=${MPI_HOME}/lib:${UCX_HOME}/lib:/usr/local/libevent/lib:/usr/local/pmix/lib:/usr/local/hwloc/lib:\$LD_LIBRARY_PATH" >> /etc/profile && \
    echo "export PATH=${MPI_HOME}/bin:${UCX_HOME}/bin:/usr/local/libevent/bin:/usr/local/pmix/bin:/usr/local/hwloc/bin:\$PATH" >> /home/skku/.bashrc && \
    echo "export LD_LIBRARY_PATH=${MPI_HOME}/lib:${UCX_HOME}/lib:/usr/local/libevent/lib:/usr/local/pmix/lib:/usr/local/hwloc/lib:\$LD_LIBRARY_PATH" >> /home/skku/.bashrc

# Configure and start the SSH service
RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd skku # Set the root user password
RUN sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
RUN sed -i 's/UsePAM yes/UsePAM no/' /etc/ssh/sshd_config

# Open port 22
EXPOSE 22

# Switch to non-root permissions
USER skku

# Start the SSH service
CMD ["/usr/sbin/sshd", "-D"]

USER root
